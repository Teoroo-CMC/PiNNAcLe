#!/usr/bin/env python3
import numpy as np
from tips.io.utils import list_loader

def _gen_frame_list(fname):
    import re
    i = 0
    frame_list = []
    with open(fname) as f:
        for l in f:
            if re.match('ITEM: TIMESTEP', l):
                frame_list.append((fname, i))
            i += len(l)
    return frame_list

def _load_dump_frame(frame):
    import numpy as np
    fname, pos = frame
    with open(fname) as f:
        f.seek(pos)
        f.readline()
        f.readline()

        assert f.readline().startswith('ITEM: NUMBER OF ATOMS')
        natoms = int(f.readline())

        assert f.readline().startswith('ITEM: BOX BOUNDS pp pp pp')
        cell = []
        for i in range(3):
            l = f.readline()
            length = float(l.split()[1])-float(l.split()[0])
            cell.append(length)
        cell = np.diag(cell)

        assert f.readline().startswith('ITEM: ATOMS id type x y z')
        coord = []
        elem = []
        for i in range(natoms):
            l = f.readline().split()
            coord.append(l[2:5])
            elem.append(l[1])

        datum = {
            'elem': np.array(elem, dtype=int),
            'coord': np.array(coord, dtype=float),
            'cell' : cell
        }
    return datum

@list_loader
def load_lammps_dump(fname):
    """
    Loads the DUMP formatted data generated by LAMMPS, for now the
    data is limited to the cell, elements and coordiantes

    Args:
        fname: file name

    Returns:
        Dataset: a TIPS dataset
    """
    from tips.io.dataset import Dataset

    frame_list = _gen_frame_list(fname)

    def indexer(i):
        datum = _load_dump_frame(frame_list[i])
        return datum

    meta = {
        "fmt": "LAMMPS Dump",
        "size": len(frame_list),
        "elem": set(indexer(0)['elem']),
        "spec": {
            "cell": {"shape": [3, 3], "dtype": "float"},
            "elem": {"shape": [None], "dtype": "int"},
            "coord": {"shape": [None, 3], "dtype": "float"},
        },
    }

    return Dataset(meta=meta, indexer=indexer)
